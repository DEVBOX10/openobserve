// Copyright 2024 OpenObserve Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Drops the folder's created_at column since Sea ORM maps this column's data
//! type to different Rust types creating runtime errors when running on a
//! non-PostgreSQL database.

use sea_orm::{
    ActiveModelTrait, ColumnTrait, EntityTrait, PaginatorTrait, QueryFilter, Set, TransactionTrait,
};
use sea_orm_migration::prelude::*;

const ALERTS_FOLDERS_FK: &str = "alerts_folders_fk";

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        add_empty_folder_uuid_column(manager).await?;
        update_folder_uuid_column(manager).await?;
        drop_foreign_key(manager).await?;
        delete_folder_id_column(manager).await?;
        rename_folder_uuid_column(manager).await?;
        Ok(())
    }

    async fn down(&self, _manager: &SchemaManager) -> Result<(), DbErr> {
        // Reversing this migration is not supported.
        Ok(())
    }
}

// Removes the old created_at column.
async fn add_empty_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    manager
        .alter_table(
            Table::alter()
                .table(Alerts::Table)
                .add_column(
                    ColumnDef::new(Alerts::FolderUuid)
                        .string_len(256)
                        .default(Expr::value(""))
                        .not_null(),
                )
                .to_owned(),
        )
        .await?;
    Ok(())
}

// Removes the old created_at column.
async fn update_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    let db = manager.get_connection();
    let txn = db.begin().await?;
    let mut alert_pages = alerts::Entity::find().paginate(&txn, 100);
    while let Some(alerts) = alert_pages.fetch_and_next().await? {
        for alert in alerts.into_iter() {
            let folder = folders::Entity::find()
                .filter(folders::Column::Id.eq(alert.folder_id))
                .one(db)
                .await?
                .unwrap();
            let mut alert: alerts::ActiveModel = alert.into();
            alert.folder_uuid = Set(folder.folder_uuid);
            alert.save(&txn).await?;
        }
    }

    txn.commit().await?;
    Ok(())
    // let sql = r#"
    //     UPDATE alerts
    //     SET folder_uuid = folders.folder_uuid
    //     FROM folders
    //     WHERE alerts.folder_id = folders.id
    // "#;

    // db.execute_unprepared(sql).await?;

    // query(query)
    //     .execute(&db.pool())
    //     .await?;
    // manager
    //     .
    //     .alter_table(
    //         Table::alter()
    //             .table(Dashboards::Table)
    //             .add_column(
    //                 ColumnDef::new(Dashboards::FolderUuid)
    //                     .string_len(100)
    //                     .null(),
    //             )
    //             .to_owned(),
    //     )
    //     .await?;
}

async fn delete_folder_id_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    manager
        .alter_table(
            Table::alter()
                .table(Alerts::Table)
                .drop_column(Alerts::FolderId)
                .to_owned(),
        )
        .await?;
    Ok(())
}

async fn rename_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    manager
        .alter_table(
            Table::alter()
                .table(Alerts::Table)
                .rename_column(Alerts::FolderUuid, Alerts::FolderId)
                .to_owned(),
        )
        .await?;
    Ok(())
}

async fn drop_foreign_key(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    manager
        .drop_foreign_key(
            ForeignKey::drop()
                .name(ALERTS_FOLDERS_FK)
                .table(Alerts::Table)
                .to_owned(),
        )
        .await?;
    Ok(())
}

/// Identifiers used in queries on the folders table.
#[derive(DeriveIden)]
enum Alerts {
    Table,
    FolderUuid,
    FolderId,
}

mod alerts {
    //! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

    use sea_orm::entity::prelude::*;

    #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
    #[sea_orm(table_name = "alerts")]
    pub struct Model {
        #[sea_orm(primary_key, auto_increment = false)]
        pub id: String,
        pub org: String,
        pub folder_id: i64,
        pub name: String,
        pub stream_type: String,
        pub stream_name: String,
        pub is_real_time: bool,
        pub destinations: Json,
        pub context_attributes: Option<Json>,
        #[sea_orm(column_type = "Text", nullable)]
        pub row_template: Option<String>,
        #[sea_orm(column_type = "Text", nullable)]
        pub description: Option<String>,
        pub enabled: bool,
        pub tz_offset: i32,
        pub last_triggered_at: Option<i64>,
        pub last_satisfied_at: Option<i64>,
        pub query_type: i16,
        pub query_conditions: Option<Json>,
        #[sea_orm(column_type = "Text", nullable)]
        pub query_sql: Option<String>,
        #[sea_orm(column_type = "Text", nullable)]
        pub query_promql: Option<String>,
        pub query_promql_condition: Option<Json>,
        pub query_aggregation: Option<Json>,
        #[sea_orm(column_type = "Text", nullable)]
        pub query_vrl_function: Option<String>,
        pub query_search_event_type: Option<i16>,
        pub query_multi_time_range: Option<Json>,
        pub trigger_threshold_operator: String,
        pub trigger_period_seconds: i64,
        pub trigger_threshold_count: i64,
        pub trigger_frequency_type: i16,
        pub trigger_frequency_seconds: i64,
        #[sea_orm(column_type = "Text", nullable)]
        pub trigger_frequency_cron: Option<String>,
        pub trigger_frequency_cron_timezone: Option<String>,
        pub trigger_silence_seconds: i64,
        pub trigger_tolerance_seconds: Option<i64>,
        pub owner: Option<String>,
        pub last_edited_by: Option<String>,
        pub updated_at: Option<i64>,
        pub folder_uuid: String,
    }

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {}

    impl ActiveModelBehavior for ActiveModel {}
}

mod folders {
    //! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

    use sea_orm::entity::prelude::*;

    #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
    #[sea_orm(table_name = "folders")]
    pub struct Model {
        #[sea_orm(primary_key)]
        pub id: i64,
        pub org: String,
        pub folder_id: String,
        pub folder_uuid: String,
        pub name: String,
        #[sea_orm(column_type = "Text", nullable)]
        pub description: Option<String>,
        pub r#type: i16,
    }

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {}

    impl ActiveModelBehavior for ActiveModel {}
}
