// Copyright 2024 OpenObserve Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Drops the folder's created_at column since Sea ORM maps this column's data
//! type to different Rust types creating runtime errors when running on a
//! non-PostgreSQL database.

use config::ider;
use sea_orm::{EntityTrait, PaginatorTrait, Set, TransactionTrait};
use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        add_nullable_folder_uuid_column(manager).await?;
        update_folder_uuid_column(manager).await?;
        Ok(())
    }

    async fn down(&self, _manager: &SchemaManager) -> Result<(), DbErr> {
        // Reversing this migration is not supported.
        Ok(())
    }
}

// Removes the old created_at column.
async fn add_nullable_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    manager
        .alter_table(
            Table::alter()
                .table(Folders::Table)
                .add_column(
                    ColumnDef::new(Folders::FolderUuid)
                        .string_len(256)
                        .default(Expr::value("")),
                )
                .to_owned(),
        )
        .await?;
    Ok(())
}

// Removes the old created_at column.
async fn update_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
    let db = manager.get_connection();
    let txn = db.begin().await?;
    let mut folder_pages = folders::Entity::find().paginate(&txn, 100);
    while let Some(folders) = folder_pages.fetch_and_next().await? {
        let folders_rslt: Result<Vec<_>, DbErr> = folders
            .into_iter()
            .map(|m| {
                let mut m: folders::ActiveModel = m.into();
                m.folder_uuid = Set(ider::uuid());
                Ok(m)
            })
            .collect();
        let folders = folders_rslt?;
        folders::Entity::insert_many(folders).exec(&txn).await?;
    }

    txn.commit().await?;
    Ok(())
}

// async fn delete_folder_id_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
//     manager
//         .alter_table(
//             Table::alter()
//                 .table(Dashboards::Table)
//                 .drop_column(Dashboards::FolderId)
//                 .to_owned(),
//         )
//         .await?;
//     Ok(())
// }

// async fn rename_folder_uuid_column(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
//     manager
//         .alter_table(
//             Table::alter()
//                 .table(Dashboards::Table)
//                 .rename_column(Dashboards::FolderUuid, Dashboards::FolderId)
//                 .to_owned(),
//         )
//         .await?;
//     Ok(())
// }

// async fn update_foreign_key(manager: &SchemaManager<'_>) -> Result<(), DbErr> {
//     manager
//         .drop_foreign_key(
//             ForeignKey::drop()
//                 .name(DASHBOARDS_FOLDERS_FK)
//                 .table(Dashboards::Table)
//                 .to_owned(),
//         )
//         .await?;
//     Ok(())
// }

#[derive(DeriveIden)]
enum Folders {
    Table,
    FolderUuid,
}

mod folders {
    //! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

    use sea_orm::entity::prelude::*;

    #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
    #[sea_orm(table_name = "folders")]
    pub struct Model {
        #[sea_orm(primary_key)]
        pub id: i64,
        pub org: String,
        pub folder_id: String,
        pub name: String,
        #[sea_orm(column_type = "Text", nullable)]
        pub description: Option<String>,
        pub folder_uuid: String,
        pub r#type: i16,
    }

    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
    pub enum Relation {}

    impl ActiveModelBehavior for ActiveModel {}
}
